"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const text_table_1 = __importDefault(require("text-table"));
const severity_1 = require("./severity");
/**
 * Given a word and a count, append an s if count is not one.
 * @param word - A word in its singular form.
 * @param count - A number controlling whether word should be pluralized.
 * @returns - The original word with an s on the end if count is not one.
 */
function pluralize(word, count) {
    return count === 1 ? word : `${word}s`;
}
/**
 * Given a line with " ${line} ${column} " where line is right-aligned and
 * column is left-aligned it replaces the delimiter with a colon.
 */
function centerLineColumn(el) {
    return el.replace(/(\d+)\s+(\d+)/u, (_m, p1, p2) => chalk_1.default.dim(`${p1}:${p2}`));
}
function stylish(results) {
    let output = "\n";
    let errorCount = 0;
    let warningCount = 0;
    let fixableErrorCount = 0;
    let fixableWarningCount = 0;
    let summaryColor = "yellow";
    results.forEach((result) => {
        const messages = result.messages;
        if (messages.length === 0) {
            return;
        }
        errorCount += result.errorCount;
        warningCount += result.warningCount;
        fixableErrorCount += result.fixableErrorCount;
        fixableWarningCount += result.fixableWarningCount;
        const rows = messages.map((message) => {
            let messageType;
            if (message.fatal || message.severity === severity_1.Severity.ERROR) {
                messageType = chalk_1.default.red("error");
                summaryColor = "red";
            }
            else {
                messageType = chalk_1.default.yellow("warning");
            }
            return [
                "",
                message.line || 0,
                message.column || 0,
                messageType,
                message.message.replace(/([^ ])\.$/u, "$1"),
                chalk_1.default.dim(message.ruleId || ""),
            ];
        });
        const options = {
            align: ["l", "r", "l"],
            stringLength(str) {
                return strip_ansi_1.default(str).length;
            },
        };
        const formattedTable = text_table_1.default(rows, options).split("\n").map(centerLineColumn).join("\n");
        output += `${chalk_1.default.underline(result.filePath)}\n`;
        output += `${formattedTable}\n\n`;
    });
    const total = errorCount + warningCount;
    if (total > 0) {
        output += chalk_1.default[summaryColor].bold([
            "\u2716 ",
            total,
            pluralize(" problem", total),
            " (",
            errorCount,
            pluralize(" error", errorCount),
            ", ",
            warningCount,
            pluralize(" warning", warningCount),
            ")\n",
        ].join(""));
        if (fixableErrorCount > 0 || fixableWarningCount > 0) {
            output += chalk_1.default[summaryColor].bold([
                "  ",
                fixableErrorCount,
                pluralize(" error", fixableErrorCount),
                " and ",
                fixableWarningCount,
                pluralize(" warning", fixableWarningCount),
                " potentially fixable with the `--fix` option.\n",
            ].join(""));
        }
    }
    // Resets output color, for prevent change on top level
    return total > 0 ? chalk_1.default.reset(output) : "";
}
exports.default = stylish;
